name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Install Dependencies for Linting
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Run Flake8
        run: |
          flake8 --config=.flake8 ./src ./tests

  test:
    runs-on: ubuntu-latest
    needs: lint  # Ensures linting runs before tests
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup Docker
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Run Tests In Docker
        run: |
          docker-compose -f docker-compose.yaml run --rm test

  build:
    runs-on: ubuntu-latest
    needs: test  # Ensures tests pass before building and uploading
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Setup Git Authentication
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "github-actions"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

      - name: Get The Last Git Tag
        id: git-last-tag
        run: |
          # Get the last Git tag (stable version)
          LAST_TAG=$(git describe --tags --abbrev=0 || echo "v0.1.0")
          echo "LAST_TAG=$LAST_TAG" >> $GITHUB_ENV
          echo "Last Git Tag: $LAST_TAG"

      - name: Get Current Version
        id: get-current-version
        run: |
          ls -la
          cd ./src
          CURRENT_VERSION=$(python -c "from agents_on_langchain import __version__; print(__version__)")
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "Current Version: $CURRENT_VERSION"

      - name: Determine Final Version
        id: set-version
        run: |
          if [[ "v$CURRENT_VERSION" != "$LAST_TAG" ]]; then
            echo "VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
            echo "is_stable=true" >> $GITHUB_ENV
          else
            DEV_VERSION="${CURRENT_VERSION}.dev$(date +%Y%m%d%H%M)"
            echo "VERSION=$DEV_VERSION" >> $GITHUB_ENV
            echo "is_stable=false" >> $GITHUB_ENV
          fi

      - name: Inject Version Into __init__.py
        if: env.is_stable == 'false'
        run: |
          sed -i "s/^__version__ = .*/__version__ = \"$VERSION\"/" src/agents_on_langchain/__init__.py
          cat src/agents_on_langchain/__init__.py | grep "__version__"  # Debugging check

      - name: Tag Stable Release
        if: env.is_stable == 'true'
        run: |
            git tag "v${VERSION}"
            git push origin "v${VERSION}"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Upload to PyPI
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          twine upload dist/* -u __token__ -p "$PYPI_TOKEN"
